name: Versioning and Release

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # L·∫•y to√†n b·ªô l·ªãch s·ª≠ ƒë·ªÉ ki·ªÉm tra commit message

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      - name: Extract branch and PR number
        id: extract
        run: |
          # L·∫•y nh√°nh
          BRANCH=${{ github.head_ref || github.ref_name }}
          echo "Branch: $BRANCH"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          # L·∫•y s·ªë PR (n·∫øu c√≥)
          PR_NUMBER=${{ github.event.number || 0 }}
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
          # L·∫•y th·ªùi gian ƒë·ªãnh d·∫°ng YYYYMMDD-HHMMSS (+07)
          TIME_STRING=$(TZ="Asia/Ho_Chi_Minh" date +%Y%m%d-%H%M%S)
          echo "TIME_STRING=$TIME_STRING" >> $GITHUB_ENV
          MSG=$(git log --format=%B -n 1 ${{github.event.after}})
          echo "HEAD_COMMIT_MESSAGE=$MSG"
          echo "HEAD_COMMIT_MESSAGE=\"$MSG\"" >> $GITHUB_ENV
          # Ki·ªÉm tra n·∫øu MSG ch·ª©a [Build]
          if echo "$MSG" | grep -q "\[Build\]"; then
            echo "BUILD_CONDITION=true" >> $GITHUB_ENV
          else
            echo "BUILD_CONDITION=false" >> $GITHUB_ENV
          fi

      - name: Determine new version
        if: env.BUILD_CONDITION == 'true'
        id: version
        run: |
          # L·∫•y phi√™n b·∫£n hi·ªán t·∫°i t·ª´ package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "Current version: $CURRENT_VERSION"
          
          # Ph√¢n t√°ch phi√™n b·∫£n (lo·∫°i b·ªè h·∫≠u t·ªë pre-release)
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CURRENT_VERSION%%-*}"
          
          # TƒÉng patch m·∫∑c ƒë·ªãnh (kh√¥ng ph·ª• thu·ªôc commit message)
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH
          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          
          # T√πy ch·ªânh phi√™n b·∫£n theo nh√°nh
          if [ "${{ env.BRANCH }}" = "main" ]; then
            # Nh√°nh main: tƒÉng patch
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
            echo "New version: $NEW_VERSION"
          elif [ "${{ env.PR_NUMBER }}" -gt 0 ]; then
            # Pull request: th√™m h·∫≠u t·ªë -pr[pr_number].[time_string]
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-pr${{ env.PR_NUMBER }}.${{ env.TIME_STRING }}"
            echo "New version: $NEW_VERSION"
          else
            # Nh√°nh kh√°c: tƒÉng patch v√† th√™m -dev.[time_string]
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-${{ env.BRANCH }}.${{ env.TIME_STRING }}"
            echo "New version: $NEW_VERSION"
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=patch" >> $GITHUB_ENV

      - name: Update package.json and commit
        if: env.BRANCH == 'main'
        run: |
          # C·∫≠p nh·∫≠t package.json
          echo "Updating package.json with new version: ${{ env.NEW_VERSION }}"
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEW_VERSION }}\"/" package.json
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "release: v${{ env.NEW_VERSION }}"
          
          # Build TypeScript
          npm run build
          git add dist/
          git commit -m "build: v${{ env.NEW_VERSION }}" || echo "No changes to commit"
          git push origin ${{ env.BRANCH }} || echo "No changes to push"

      - name: Publish to npm for PR or dev branch
        if: (env.PR_NUMBER > 0 || env.BRANCH == 'dev') &&  env.BUILD_CONDITION == 'true'
        id: publish_pr_dev
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # T·∫°o b·∫£n sao package.json v·ªõi phi√™n b·∫£n m·ªõi
          sed -i "s/\"version\": \".*\"/\"version\": \"${{ env.NEW_VERSION }}\"/" package.json
          cat package.json
          
          # Build TypeScript
          npm run build || { echo "Build failed"; exit 1; }
          # Publish v·ªõi tag pr
          npm publish --access public  || { echo "Failed to publish PR to npm"; exit 1; }
      - name: Publish to npm for main
        if: env.BRANCH == 'main' && env.BUILD_CONDITION == 'true'
        id: publish_main
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public

      - name: Tag and push
        if: (env.BRANCH == 'main' || env.BRANCH == 'dev') && env.BUILD_CONDITION == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "${{ env.BRANCH }}"


      - name: Send Discord notification
        if: (steps.publish_pr_dev.outcome == 'success' || steps.publish_main.outcome == 'success') && env.BUILD_CONDITION == 'true'
        run: |
          # Chu·∫©n b·ªã n·ªôi dung th√¥ng b√°o
          MESSAGE="**New Version Generated** üéâ\n"
          MESSAGE+="**Repository**: ${{ github.repository }}\n"
          MESSAGE+="**Branch**: ${{ env.BRANCH }}\n"
          if [ "${{ env.PR_NUMBER }}" -gt 0 ]; then
            MESSAGE+="**Pull Request**: #${{ env.PR_NUMBER }}\n"
          fi
          MESSAGE+="**Version**: ${{ env.NEW_VERSION }}\n"
          MESSAGE+="**Version Type**: ${{ env.VERSION_TYPE }}\n"
          MESSAGE+="**Commit**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\n"
          
          # G·ª≠i th√¥ng b√°o t·ªõi Discord
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "{\"content\": \"$MESSAGE\"}" \
               "${{ secrets.DISCORD_WEBHOOK }}" || echo "Failed to send Discord notification"

      - name: Post comment on PR
        if: env.PR_NUMBER > 0 && steps.publish_pr_dev.outcome == 'success' && env.BUILD_CONDITION == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Chu·∫©n b·ªã n·ªôi dung b√¨nh lu·∫≠n
          # L·∫•y commit message
          
          # Chu·∫©n h√≥a n·ªôi dung b√¨nh lu·∫≠n
          # Tho√°t k√Ω t·ª± ƒë·∫∑c bi·ªát v√† ƒë·ªãnh d·∫°ng JSON an to√†n
          echo "Posting comment on PR #${{ env.HEAD_COMMIT_MESSAGE }}"
          url="${{ github.event.pull_request._links.html.href}}/commits/${{github.event.after}}"
          COMMENT="Release for [${{ env.HEAD_COMMIT_MESSAGE }}]($url)\nNpm Version: [${{ env.NEW_VERSION }}](https://www.npmjs.com/package/${{env.PACKAGE_NAME}}/v/${{ env.NEW_VERSION }})"
          COMMENT=$(printf '%s' "$COMMENT" | sed 's/"/\\"/g')
          echo "Formatted comment: $COMMENT"
          
          # In ra ƒë·ªÉ debug
          echo "Comment to post: $COMMENT"
          
          # G·ª≠i b√¨nh lu·∫≠n t·ªõi PR
          curl -X POST \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -d "{\"body\": \"$COMMENT\"}" \
               "${{ github.event.pull_request._links.comments.href}}" || echo "Failed to post comment on PR"
